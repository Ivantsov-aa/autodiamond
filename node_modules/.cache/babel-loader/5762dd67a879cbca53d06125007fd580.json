{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport Inputmask from 'inputmask';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar useInputMask = function useInputMask(props) {\n  var mask = props.mask,\n      register = props.register,\n      options = props.options;\n  var ref = useRef(null);\n  useEffect(function () {\n    if (!ref.current) {\n      return;\n    }\n\n    var maskInput = Inputmask(_extends({\n      mask: mask\n    }, options));\n    maskInput.mask(ref.current);\n\n    if (register && ref.current) {\n      register(ref.current);\n    }\n  }, [mask, register, options]);\n  return ref;\n};\n\nexport default useInputMask;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;MACXC,OAA4BD,MAA5BC;MAAMC,WAAsBF,MAAtBE;MAAUC,UAAYH,MAAZG;EAExB,IAAMC,GAAG,GAAGC,MAAM,CAAmB,IAAnB,CAAlB;EAEAC,SAAS,CAAC;IACR,IAAI,CAACF,GAAG,CAACG,OAAT,EAAkB;MAChB;IACD;;IAED,IAAMC,SAAS,GAAGC,SAAS;MACzBR,IAAI,EAAJA;IADyB,GAEtBE,OAFsB,EAA3B;IAKAK,SAAS,CAACP,IAAVO,CAAeJ,GAAG,CAACG,OAAnBC;;IAEA,IAAIN,QAAQ,IAAIE,GAAG,CAACG,OAApB,EAA6B;MAC3BL,QAAQ,CAACE,GAAG,CAACG,OAAL,CAARL;IACD;EAdM,GAeN,CAACD,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,CAfM,CAATG;EAiBA,OAAOF,GAAP;AAtBF","names":["useInputMask","props","mask","register","options","ref","useRef","useEffect","current","maskInput","Inputmask"],"sources":["C:\\front\\autodiamond\\node_modules\\use-mask-input\\src\\useMaskInput.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport Inputmask, { Options } from 'inputmask';\n\ninterface UseInputMaskOptions {\n  mask: Options['mask']\n  register?(element: HTMLElement): void\n  options?: Options\n}\n\nconst useInputMask = (props: UseInputMaskOptions) => {\n  const { mask, register, options } = props;\n\n  const ref = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const maskInput = Inputmask({\n      mask,\n      ...options,\n    });\n\n    maskInput.mask(ref.current);\n\n    if (register && ref.current) {\n      register(ref.current);\n    }\n  }, [mask, register, options]);\n\n  return ref;\n};\n\nexport default useInputMask;\n"]},"metadata":{},"sourceType":"module"}